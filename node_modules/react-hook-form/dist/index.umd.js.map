{"version":3,"file":"index.umd.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/useFormState.ts","../src/useController.ts","../src/logic/getControllerValue.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFocusFieldName.ts","../src/logic/mapCurrentIds.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/omitKeys.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/utils/cloneObject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isFunction.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isString.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/Subject.ts","../src/utils/unset.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/logic/getResolverOptions.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/useForm.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  nameRef.current = name as InternalFieldName;\n\n  React.useEffect(() => {\n    const formStateSubscription = control._subjects.state.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, _localProxyFormState.current) &&\n        updateFormState({\n          ...control._formState,\n          ...formState,\n        }),\n    });\n\n    disabled && formStateSubscription.unsubscribe();\n\n    return () => formStateSubscription.unsubscribe();\n  }, [disabled, control]);\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    const controllerSubscription = control._subjects.control.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n    updateMounted(name, true);\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const _shouldUnregisterField =\n        control._shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options?: FieldArrayMethodProps,\n): string =>\n  options && !options.shouldFocus\n    ? options.focusName || `${name}.${options.focusIndex}.`\n    : `${name}.${index}.`;\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import isObject from './isObject';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => !isHTMLElement(ref) || !document.contains(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  RegisterOptions,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport omitKey from '../utils/omitKeys';\nimport Subject from '../utils/Subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let formOptions = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _delayCallback: DelayCallback;\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = formOptions.defaultValues || {};\n  let _formValues = formOptions.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _timer = 0;\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let _validateCount: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationMode = getValidationModes(formOptions.mode);\n  const reValidateMode = getValidationModes(formOptions.reValidateMode);\n  const isValidateAllFieldCriteria =\n    formOptions.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(_timer);\n      _timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    _names.watchAll ||\n    _names.watch.has(name) ||\n    _names.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const updateErrorState = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const shouldRenderBaseOnError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      _delayCallback =\n        _delayCallback || debounce(updateErrorState, props.delayError);\n\n      _delayCallback(name, error);\n    } else {\n      clearTimeout(_timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousError, error) : previousError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    _validateCount[name]--;\n\n    if (_proxyFormState.isValidating && !_validateCount[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      _validateCount = {};\n    }\n  };\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const _f = field._f;\n\n      if (_f) {\n        set(_formValues, name, getFieldValueAs(value, _f));\n\n        fieldValue =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(_f.ref) && !isString(fieldValue)) {\n          _f.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (_f.refs) {\n          if (isCheckBoxInput(_f.ref)) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!fieldValue);\n          } else {\n            _f.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          _f.ref.value = fieldValue;\n        }\n\n        if (shouldRender) {\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirtyState(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const updateTouchAndDirtyState = (\n    name: InternalFieldName,\n    inputValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    const state: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    let isChanged = false;\n\n    if (_proxyFormState.isDirty) {\n      const previousIsDirty = _formState.isDirty;\n      _formState.isDirty = _getIsDirty();\n      state.isDirty = _formState.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(\n        get(_defaultValues, name),\n        inputValue,\n      );\n      isCurrentFieldDirty\n        ? set(_formState.dirtyFields as TFieldValues, name, true)\n        : unset(_formState.dirtyFields, name);\n      state.dirtyFields = _formState.dirtyFields;\n      isChanged =\n        isChanged || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      state.touchedFields = _formState.touchedFields;\n      isChanged =\n        isChanged ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isChanged && shouldRender && _subjects.state.next(state);\n\n    return isChanged ? state : {};\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) => {\n    return formOptions.resolver\n      ? await formOptions.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          formOptions.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            formOptions.criteriaMode,\n            formOptions.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n  };\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const validateForm = async (\n    _fields: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in _fields) {\n      const field = _fields[name];\n\n      if (field) {\n        const _f = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          );\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n\n            if (shouldCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldCheckValid) {\n            fieldError[_f.name]\n              ? set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name);\n          }\n        }\n\n        fieldValue &&\n          (await validateForm(fieldValue, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const handleChange: ChangeHandler = async ({\n    type,\n    target,\n    target: { value, name, type: inputType },\n  }) => {\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      let error;\n      let isValid;\n      const inputValue = inputType ? getFieldValue(field._f) : value;\n      const isBlurEvent = type === EVENTS.BLUR;\n\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !formOptions.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          reValidateMode,\n          validationMode,\n        );\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n\n      set(_formValues, name, inputValue);\n\n      const fieldState = updateTouchAndDirtyState(\n        name,\n        inputValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      _validateCount[name] = _validateCount[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (formOptions.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const parentField = get(_fields, parentNodeName);\n\n          if (\n            Array.isArray(parentField) &&\n            parentField.every(\n              (field: Field) => field._f && isCheckBoxInput(field._f.ref),\n            )\n          ) {\n            const parentError = get(errors, parentNodeName, {});\n            parentError.type && (error = parentError);\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      if (field._f.deps) {\n        trigger(field._f.deps as FieldPath<TFieldValues>[]);\n      }\n\n      shouldRenderBaseOnError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const _updateValidAndInputValue = (\n    name: InternalFieldName,\n    shouldSkipValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      const fieldValue = get(_formValues, name);\n      const defaultValue = isUndefined(fieldValue)\n        ? get(_defaultValues, name)\n        : fieldValue;\n\n      if (\n        isUndefined(defaultValue) ||\n        (ref && (ref as HTMLInputElement).defaultChecked) ||\n        shouldSkipValueAs\n      ) {\n        set(\n          _formValues,\n          name,\n          shouldSkipValueAs ? defaultValue : getFieldValue(field._f),\n        );\n      } else {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const _getIsDirty: GetIsDirty = (name, data) => {\n    name && data && set(_formValues, name, data);\n\n    return !deepEqual({ ...getValues() }, _defaultValues);\n  };\n\n  const _updateValid = async (skipRender?: boolean) => {\n    let isValid = false;\n    if (_proxyFormState.isValid) {\n      isValid = formOptions.resolver\n        ? isEmptyObject((await executeResolver()).errors)\n        : await validateForm(_fields, true);\n\n      if (!skipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n    return isValid;\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) =>\n    Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n          )\n        : setFieldValue(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n            true,\n          );\n    });\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    fieldNames,\n    defaultValue,\n    isMounted,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(isMounted || _stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(fieldNames)\n        ? { [fieldNames]: defaultValue }\n        : defaultValue),\n    };\n\n    if (!fieldNames) {\n      isGlobal && (_names.watchAll = true);\n      return fieldValues;\n    }\n\n    const result = [];\n\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && _names.watch.add(fieldName as InternalFieldName);\n      result.push(get(fieldValues, fieldName as InternalFieldName));\n    }\n\n    return Array.isArray(fieldNames) ? result : result[0];\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    keyName,\n    name,\n    method,\n    args,\n    values = [],\n    shouldSet = true,\n    shouldSetFields = true,\n  ) => {\n    let output;\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      output = method(get(_fields, name), args.argA, args.argB);\n      shouldSet && set(_fields, name, output);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const output = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSet && set(_formState.errors, name, output);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const output = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(_formState.touchedFields as TFieldValues, name, output);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      set(\n        _formState.dirtyFields as TFieldValues,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(values, keyName),\n          get(_defaultValues, name, []),\n          get(_formState.dirtyFields, name, []),\n        ),\n      );\n      values &&\n        set(\n          _formState.dirtyFields as TFieldValues,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(values, keyName),\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n      unsetEmptyArray(_formState.dirtyFields, name);\n    }\n\n    _subjects.state.next({\n      isDirty: _getIsDirty(name, omitKey(values, keyName)),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const _getFieldArrayValue = (name: InternalFieldName) =>\n    get(_stateFlags.mount ? _formValues : _defaultValues, name, []);\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          _formState.dirtyFields as TFieldValues,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getIsDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n    let isValid;\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (formOptions.resolver) {\n      const schemaResult = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n      isValid = name\n        ? fieldNames.every((name) => !get(schemaResult, name))\n        : isEmptyObject(schemaResult);\n    } else {\n      if (name) {\n        isValid = (\n          await Promise.all(\n            fieldNames.map(async (fieldName) => {\n              const field = get(_fields, fieldName);\n              return await validateForm(\n                field._f ? { [fieldName]: field } : field,\n              );\n            }),\n          )\n        ).every(Boolean);\n\n        _updateValid();\n      } else {\n        isValid = await validateForm(_fields);\n      }\n    }\n\n    _subjects.state.next({\n      ...(isString(name) ? { name } : {}),\n      errors: _formState.errors,\n      isValid,\n      isValidating: false,\n    });\n\n    if (options.shouldFocus && !isValid) {\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n    }\n\n    return isValid;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            fieldName(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          false,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(inputName);\n      _names.array.delete(inputName);\n\n      if (get(_fields, inputName)) {\n        if (!options.keepValue) {\n          unset(_fields, inputName);\n          unset(_formValues, inputName);\n        }\n\n        !options.keepError && unset(_formState.errors, inputName);\n        !options.keepDirty && unset(_formState.dirtyFields, inputName);\n        !options.keepTouched && unset(_formState.touchedFields, inputName);\n        !formOptions.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, inputName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getIsDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    fieldRef: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field: Field = get(_fields, name);\n    const ref = isUndefined(fieldRef.value)\n      ? fieldRef.querySelectorAll\n        ? (fieldRef.querySelectorAll('input,select,textarea')[0] as Ref) ||\n          fieldRef\n        : fieldRef\n      : fieldRef;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(_fields, name, field);\n\n    (!options || !options.disabled) &&\n      _updateValidAndInputValue(name, false, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    if (!isUndefined(options.value)) {\n      set(_formValues, name, options.value);\n    }\n\n    if (field && isBoolean(options.disabled)) {\n      set(\n        _formValues,\n        name,\n        options.disabled\n          ? undefined\n          : get(_formValues, name, getFieldValue(field._f)),\n      );\n    }\n\n    !field && _updateValidAndInputValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              registerFieldRef(name, ref, options);\n            } else {\n              const field = get(_fields, name, {}) as Field;\n              const _shouldUnregister =\n                formOptions.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              _shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (formOptions.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await validateForm(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          formOptions.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const values = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepValues) {\n      _formValues = props.shouldUnregister ? {} : values;\n    }\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of _names.mount) {\n        const field = get(_fields, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = { ...updatedValues };\n    }\n\n    if (!keepStateOptions.keepValues) {\n      _fields = {};\n\n      _subjects.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? _defaultValues\n          : { ...updatedValues },\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(_fields, name)._f.ref.focus();\n\n  const _removeFields = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name) as Field;\n\n      field &&\n        (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getIsDirty,\n      _updateValid,\n      _removeFields,\n      _updateFieldArray,\n      _getFieldArrayValue,\n      _subjects,\n      _shouldUnregister: formOptions.shouldUnregister,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      _updateProps: (options) => {\n        formOptions = { ...defaultOptions, ...options };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fields, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArrayValue(name), keyName));\n  const _fieldIds = React.useRef(fields);\n\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      set(control._formValues, name, updatedFieldArrayValues);\n      setFields(updatedFieldArrayValuesWithKey);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      keyName,\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      keyName,\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      keyName,\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArrayValue(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      keyName,\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArrayValue(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      keyName,\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArrayValue(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      keyName,\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArrayValue(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      keyName,\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      keyName,\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = control._subjects.array.subscribe({\n      next({ values, name: fieldArrayName }) {\n        if (fieldArrayName === name || !fieldArrayName) {\n          setFields(mapIds(get(values, name), keyName));\n        }\n      },\n    });\n\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      if (control._shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._updateProps(props);\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  React.useEffect(() => {\n    const formStateSubscription = control._subjects.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n          control._formState = {\n            ...control._formState,\n            ...formState,\n          };\n\n          updateFormState({ ...control._formState });\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n    };\n  }, [control]);\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeFields();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n  _name.current = name;\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    const watchSubscription = control._subjects.watch.subscribe({\n      next: ({ name }) => {\n        if (\n          !_name.current ||\n          !name ||\n          convertToArrayPayload(_name.current).some(\n            (fieldName) =>\n              name &&\n              fieldName &&\n              (fieldName.startsWith(name as InternalFieldName) ||\n                name.startsWith(fieldName as InternalFieldName)),\n          )\n        ) {\n          const result = control._getWatch(\n            _name.current as InternalFieldName,\n            defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n            true,\n          );\n          updateValue(\n            isObject(result)\n              ? { ...result }\n              : Array.isArray(result)\n              ? [...result]\n              : result,\n          );\n        }\n      },\n    });\n\n    disabled && watchSubscription.unsubscribe();\n\n    return () => watchSubscription.unsubscribe();\n  }, [disabled, control, defaultValue]);\n\n  React.useEffect(() => {\n    control._removeFields();\n  });\n\n  return value;\n}\n"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","React","createContext","displayName","useFormContext","useContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","useFormState","props","methods","control","disabled","nameRef","useRef","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","useEffect","formStateSubscription","_subjects","state","subscribe","next","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useController","shouldUnregister","setInputStateValue","_formValues","_defaultValues","registerProps","register","rules","updateMounted","useCallback","field","_fields","_f","mount","controllerSubscription","values","_shouldUnregisterField","_shouldUnregister","isNameInFieldArray","_names","array","_stateFlags","action","unregister","onChange","event","target","isCheckBoxInput","checked","getControllerValue","onBlur","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","validateAllFieldCriteria","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","_fieldIds","keyName","map","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","slice","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","fieldValues","cloneObject","Set","deepEqual","object1","object2","isPrimitive","keys1","keys2","val1","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","window","document","isHTMLElement","contains","Subscription","this","tearDown","tearDowns","push","teardown","Subscriber","observer","subscription","add","closed","Subject","observers","subscriber","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","isString","isValidElement","RegExp","getValidateError","isMessage","validationData","isRegex","async","inputValue","shouldUseNativeValidation","required","maxLength","minLength","min","max","pattern","validate","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","defaultOptions","reValidateMode","shouldFocusError","isWindowUndefined","createFormControl","_delayCallback","formOptions","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","watch","_timer","unMount","_validateCount","validationMode","getValidationModes","isValidateAllFieldCriteria","criteriaMode","isFieldWatched","watchAll","has","updateErrorState","shouldRenderBaseOnError","shouldSkipRender","previousError","shouldUpdateValid","wait","delayError","args","clearTimeout","setTimeout","updatedFormState","setFieldValue","shouldRender","fieldValue","isWeb","forEach","selectRef","checkboxRef","radioRef","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","isCurrentTouched","isChanged","previousIsDirty","_getIsDirty","isPreviousFieldDirty","isPreviousFieldTouched","executeResolver","resolver","context","getResolverOptions","validateForm","shouldCheckValid","valid","fieldError","validateField","handleChange","inputType","isBlurEvent","shouldSkipValidation","deps","skipValidation","isWatched","parentNodeName","parentField","parentError","_updateValid","_updateValidAndInputValue","shouldSkipValueAs","defaultChecked","getValues","skipRender","setValues","entries","fieldKey","fieldName","_getWatch","fieldNames","isMounted","isGlobal","schemaResult","executeResolverValidation","Promise","all","inputName","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","_removeFields","live","_updateFieldArray","method","shouldSet","shouldSetFields","argA","argB","unsetEmptyArray","setFieldArrayDirtyFields","omitKey","_getFieldArrayValue","_updateProps","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","setValue","isFieldArray","reset","formValues","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","clearErrors","setError","setFocus","render","Provider","children","setFields","mapIds","updateValues","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","watchField","startsWith","fieldArraySubscription","fieldArrayName","swap","mapCurrentIds","swapArrayAt","move","moveArrayAt","prependAt","fillEmptyArray","getFocusFieldName","appendValue","appendAt","remove","removeArrayAt","insertAt","update","updateAt","_formControl","_name","updateValue","watchSubscription"],"mappings":"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"}